package com.lwt.qmqiu.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lwt.qmqiu.bean.DownloadFileDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_FILE_DB".
*/
public class DownloadFileDbDao extends AbstractDao<DownloadFileDb, Long> {

    public static final String TABLENAME = "DOWNLOAD_FILE_DB";

    /**
     * Properties of entity DownloadFileDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileId = new Property(2, String.class, "fileId", false, "FILE_ID");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property FilePath = new Property(4, String.class, "filePath", false, "FILE_PATH");
    }


    public DownloadFileDbDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadFileDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_FILE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_NAME\" TEXT NOT NULL ," + // 1: fileName
                "\"FILE_ID\" TEXT UNIQUE ," + // 2: fileId
                "\"TIME\" INTEGER," + // 3: time
                "\"FILE_PATH\" TEXT);"); // 4: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_FILE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadFileDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileName());
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(3, fileId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(5, filePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadFileDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileName());
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(3, fileId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(5, filePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadFileDb readEntity(Cursor cursor, int offset) {
        DownloadFileDb entity = new DownloadFileDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadFileDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.getString(offset + 1));
        entity.setFileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadFileDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadFileDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadFileDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
